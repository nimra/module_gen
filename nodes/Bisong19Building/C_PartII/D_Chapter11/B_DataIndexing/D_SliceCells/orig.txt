Chapter 11   Pandas

'Output':
Out[29]:
3     Abia
4    Benue


Slice Cells by Row and Column from a DataFrame
First let’s create a DataFrame. Remember, we use iloc when no explicit index or row
labels are assigned.

my_DF = pd.DataFrame({'age': [15,17,21,29,25], \
            'state_of_origin':['Lagos', 'Cross River', 'Kano', 'Abia',
             'Benue']})
my_DF
'Output':
   age state_of_origin
0   15          Lagos
1   17    Cross River
2   21            Kano
3   29            Abia
4   25          Benue
# select the third row and second column
my_DF.iloc[2,1]
'Output': 'Kano'
# slice the first 2 rows - indexed from zero, excluding the final index
my_DF.iloc[:2,]
'Output':
   age state_of_origin
0   15          Lagos
1   17    Cross River
# slice the last three rows from the last column
my_DF.iloc[-3:,-1]
'Output':
2     Kano
3     Abia
4    Benue
Name: state_of_origin, dtype: object
124
                                                                        Chapter 11   Pandas


DataFrame Manipulation
Let’s go through some common tasks for manipulating a DataFrame.


Removing a Row/Column
In many cases during the data cleaning process, there may be a need to drop unwanted
rows or data variables (i.e., columns). We typically do this using the drop function. The
drop function has a parameter axis whose default is 0. If axis is set to 1, it drops columns
in a dataset, but if left at the default, rows are dropped from the dataset.
    Note that when a column or row is dropped, a new DataFrame or Series is returned
without altering the original data structure. However, when the attribute inplace is set to
True, the original DataFrame or Series is modified. Let’s see some examples.

# the data frame
my_DF = pd.DataFrame({'age': [15,17,21,29,25], \
            'state_of_origin':['Lagos', 'Cross River', 'Kano', 'Abia',
             'Benue']})
my_DF
'Output':
   age state_of_origin
0   15          Lagos
1   17    Cross River
2   21            Kano
3   29            Abia
4   25          Benue
# drop the 3rd and 4th column
my_DF.drop([2,4])
'Output':
   age state_of_origin
0   15          Lagos
1   17    Cross River
3   29            Abia
# drop the `age` column
my_DF.drop('age', axis=1)



                                                                                        125
