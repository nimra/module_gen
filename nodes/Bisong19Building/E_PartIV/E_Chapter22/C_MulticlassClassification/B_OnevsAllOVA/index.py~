# Lawrence McAfee

# ~~~~~~~~ import ~~~~~~~~
from modules.node.HierNode import HierNode
from modules.node.LeafNode import LeafNode
from modules.node.Stage import Stage
from modules.node.block.CodeBlock import CodeBlock
from modules.node.block.MarkdownBlock import MarkdownBlock


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                                      Chapter 22   Support Vector Machines
# 
#     The one-vs.-one multi-class technique can potentially lead to a large number of
# constructed classifiers and hence can result in slower processing time. Conversely, the
# classifiers are more robust to class imbalances when training each classifier.
# 
# 
# 
# 
# Figure 22-8. Suppose we have four classes in the dataset labeled A to D, this will
# result in six different classifiers
# 
# 
# O
#  ne-vs.-All (OVA)
# The one-vs.-all method for fitting an SVM to a multi-classification problem where
# the number of classes k is greater than 2 consists of fitting each k class against the
# remaining k â€“ 1 classes. Suppose we have ten classes, each of the classes will be
# classified against the remaining nine classes. This example is illustrated with four
# classes in Figure 22-9.
# 
# 
# 
# 
#                                                                                          261
# 
# Chapter 22   Support Vector Machines
# 
# 
# 
# 
# Figure 22-9. Given four classes in a dataset, we construct four classifiers, with
# each class fitted against the rest
# 
#     The classifiers are evaluated by comparing a test example to each fitted classifier. The
# classifier for which the margin of the hyperplane is the largest is chosen as the predicted
# classification target because the classifier margin size is indicative of high confidence of
# class membership.
# 
# 
# 
# T he Kernel Trick: Fitting Non-linear Decision
#  Boundaries
# Non-linear datasets occur more often than not in real world scenarios.
#     Technically speaking, the name support vector machine is when a support vector
# classifier is used with a non-linear kernel to learn non-linear decision boundaries.
# 
# 
# 
# 262
# 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Content(LeafNode):
    def __init__(self):
        super().__init__(
            "One-vs.-All (OVA)",
            # Stage.CLEAN_TEXT,
            # Stage.CODE_BLOCKS,
            # Stage.MARKDOWN_BLOCKS,
            # Stage.FIGURES,
            # Stage.EXERCISES,
            # Stage.CUSTOMIZED,
        )
        self.add(MarkdownBlock("# One-vs.-All (OVA)"))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class OnevsAllOVA(HierNode):
    def __init__(self):
        super().__init__("One-vs.-All (OVA)")
        self.add(Content())

# eof
