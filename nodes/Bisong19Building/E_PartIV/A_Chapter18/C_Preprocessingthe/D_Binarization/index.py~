# Lawrence McAfee

# ~~~~~~~~ import ~~~~~~~~
from modules.node.HierNode import HierNode
from modules.node.LeafNode import LeafNode
from modules.node.Stage import Stage
from modules.node.block.CodeBlock import CodeBlock
from modules.node.block.MarkdownBlock import MarkdownBlock


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Binarization
# Binarization is a transformation technique for converting a dataset into binary values
# by setting a cutoff or threshold. All values above the threshold are set to 1, while those
# below are set to 0. This technique is useful for converting a dataset of probabilities into
# integer values or in transforming a feature to reflect some categorization. Scikit-learn
# implements binarization with the Binarizer module.
# 
# # import packages
# from sklearn import datasets
# from sklearn.preprocessing import Binarizer
# 
# # load dataset
# data = datasets.load_iris()
# # separate features and target
# X = data.data
# y = data.target
# 
# # print first 5 rows of X before binarization
# X[0:5,:]
# 'Output':
# array([[5.1, 3.5, 1.4, 0.2],
#        [4.9, 3. , 1.4, 0.2],
#        [4.7, 3.2, 1.3, 0.2],
#        [4.6, 3.1, 1.5, 0.2],
#        [5. , 3.6, 1.4, 0.2]])
# 
# # binarize X
# scaler = Binarizer(threshold = 1.5).fit(X)
# binarize_X = scaler.transform(X)
# 
# # print first 5 rows of X after binarization
# binarize_X[0:5,:]
# 'Output':
# array([[1., 1., 0., 0.],
#        [1., 1., 0., 0.],
#        [1., 1., 0., 0.],
#        [1., 1., 0., 0.],
#        [1., 1., 0., 0.]])

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Content(LeafNode):
    def __init__(self):
        super().__init__(
            "Binarization",
            Stage.REMOVE_EXTRANEOUS,
            # Stage.ORIG_BLOCKS,
            # Stage.CUSTOM_BLOCKS,
            # Stage.ORIG_FIGURES,
            # Stage.CUSTOM_FIGURES,
            # Stage.CUSTOM_EXERCISES,
        )
        self.add(MarkdownBlock("# Binarization"))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Binarization(HierNode):
    def __init__(self):
        super().__init__("Binarization")
        self.add(Content())

# eof
