# Lawrence McAfee

# ~~~~~~~~ import ~~~~~~~~
from modules.node.HierNode import HierNode
from modules.node.LeafNode import LeafNode
from modules.node.Stage import Stage
from modules.node.block.CodeBlock import CodeBlock
from modules.node.block.MarkdownBlock import MarkdownBlock


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Input Missing Data
# It is often the case that a dataset contains several missing observations. Scikit-learn
# implements the Imputer module for completing missing values.
# 
# # import packages
# from sklearn. impute import SimpleImputer
# 
# # create dataset
# data = np.array([[5,np.nan,8],[9,3,5],[8,6,4],
#                  [np.nan,5,2],[2,3,9],[np.nan,8,7],
#                  [1,np.nan,5]])
# data
# 'Output':
# array([[ 5., nan,  8.],
#        [ 9.,  3.,  5.],
#        [ 8.,  6.,  4.],
#        [nan,  5.,  2.],
#        [ 2.,  3.,  9.],
#        [nan,  8.,  7.],
#        [ 1., nan,  5.]])
# 
# # impute missing values - axis=0: impute along columns
# imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
# imputer.fit_transform(data)
# 'Output':
# array([[5., 5., 8.],
#        [9., 3., 5.],
#        [8., 6., 4.],
#        [5., 5., 2.],
#        [2., 3., 9.],
#        [5., 8., 7.],
#        [1., 5., 5.]])

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Content(LeafNode):
    def __init__(self):
        super().__init__(
            "Input Missing Data",
            Stage.REMOVE_EXTRANEOUS,
            # Stage.ORIG_BLOCKS,
            # Stage.CUSTOM_BLOCKS,
            # Stage.ORIG_FIGURES,
            # Stage.CUSTOM_FIGURES,
            # Stage.CUSTOM_EXERCISES,
        )
        self.add(MarkdownBlock("# Input Missing Data"))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class InputMissing(HierNode):
    def __init__(self):
        super().__init__("Input Missing Data")
        self.add(Content())

# eof
