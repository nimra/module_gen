# Lawrence McAfee

# ~~~~~~~~ import ~~~~~~~~
from modules.node.HierNode import HierNode
from modules.node.LeafNode import LeafNode
from modules.node.Stage import Stage
from modules.node.block.CodeBlock import CodeBlock
from modules.node.block.MarkdownBlock import MarkdownBlock


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Tree Depth/Number of Trees
# Gradient boosting can be controlled by choosing the tree depth as a hyper-parameter
# to the model. In practice, a tree depth of 1 performs well, as each tree consists of just a
# single split. Also, the number of trees can affect the model accuracy, because gradient
# boosting can overfit if the number of successive trees is vast.
# 
# 
# S
#  hrinkage
# The shrinkage hyper-parameter λ controls the learning rate of the gradient boosting
# model. An arbitrarily small value of λ may necessitate a larger number of trees to obtain a
# good model performance. However, with a small shrinkage size and tree depth d = 1, the
# residuals slowly improve by creating more varied trees to improve the worst performing
# areas of the model. Rule of thumb: shrinkage size is 0.01 or 0.001.
# 
# 
# Stochastic Gradient Boosting with Scikit-learn
# This section will implement SGB with Scikit-learn for both regression and classification
# use cases.

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Content(LeafNode):
    def __init__(self):
        super().__init__(
            "Tree Depth/Number of Trees",
            Stage.CLEAN_TEXT,
            # Stage.CODE_BLOCKS,
            # Stage.MARKDOWN_BLOCKS,
            # Stage.FIGURES,
            # Stage.EXERCISES,
            # Stage.CUSTOMIZED,
        )
        self.add(MarkdownBlock("# Tree Depth/Number of Trees"))

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class TreeDepthNumber(HierNode):
    def __init__(self):
        super().__init__("Tree Depth/Number of Trees")
        self.add(Content())

# eof
