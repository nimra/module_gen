                       Download from finelybook www.finelybook.com
Randomized PCA
Scikit-Learn offers yet another option to perform PCA, called Randomized PCA. This
is a stochastic algorithm that quickly finds an approximation of the first d principal
components. Its computational complexity is O(m × d2) + O(d3), instead of O(m × n2)
+ O(n3), so it is dramatically faster than the previous algorithms when d is much
smaller than n.
      rnd_pca = PCA(n_components=154, svd_solver="randomized")
      X_reduced = rnd_pca.fit_transform(X_mnist)


Kernel PCA
In Chapter 5 we discussed the kernel trick, a mathematical technique that implicitly
maps instances into a very high-dimensional space (called the feature space), enabling
nonlinear classification and regression with Support Vector Machines. Recall that a
linear decision boundary in the high-dimensional feature space corresponds to a
complex nonlinear decision boundary in the original space.
It turns out that the same trick can be applied to PCA, making it possible to perform
complex nonlinear projections for dimensionality reduction. This is called Kernel
PCA (kPCA).6 It is often good at preserving clusters of instances after projection, or
sometimes even unrolling datasets that lie close to a twisted manifold.
For example, the following code uses Scikit-Learn’s KernelPCA class to perform kPCA
with an RBF kernel (see Chapter 5 for more details about the RBF kernel and the
other kernels):
      from sklearn.decomposition import KernelPCA

      rbf_pca = KernelPCA(n_components = 2, kernel="rbf", gamma=0.04)
      X_reduced = rbf_pca.fit_transform(X)
Figure 8-10 shows the Swiss roll, reduced to two dimensions using a linear kernel
(equivalent to simply using the PCA class), an RBF kernel, and a sigmoid kernel
(Logistic).




6 “Kernel Principal Component Analysis,” B. Schölkopf, A. Smola, K. Müller (1999).



218   |   Chapter 8: Dimensionality Reduction
