                                                       3 NaN B3 C3
                                                       4 NaN B4 C4

The combination of options of the pd.concat function allows a wide range of possi‐
ble behaviors when you are joining two datasets; keep these in mind as you use these
tools for your own data.

The append() method
Because direct array concatenation is so common, Series and DataFrame objects
have an append method that can accomplish the same thing in fewer keystrokes. For
example, rather than calling pd.concat([df1, df2]), you can simply call
df1.append(df2):
      In[16]: print(df1); print(df2); print(df1.append(df2))
      df1                    df2                df1.append(df2)
             A     B              A    B             A   B
       1    A1    B1         3   A3   B3        1   A1 B1
       2    A2    B2         4   A4   B4        2   A2 B2
                                                3   A3 B3
                                                4   A4 B4

Keep in mind that unlike the append() and extend() methods of Python lists, the
append() method in Pandas does not modify the original object—instead, it creates a
new object with the combined data. It also is not a very efficient method, because it
involves creation of a new index and data buffer. Thus, if you plan to do multiple
append operations, it is generally better to build a list of DataFrames and pass them all
at once to the concat() function.
In the next section, we’ll look at another more powerful approach to combining data
from multiple sources, the database-style merges/joins implemented in pd.merge. For
more information on concat(), append(), and related functionality, see the “Merge,
Join, and Concatenate” section of the Pandas documentation.

Combining Datasets: Merge and Join
One essential feature offered by Pandas is its high-performance, in-memory join and
merge operations. If you have ever worked with databases, you should be familiar
with this type of data interaction. The main interface for this is the pd.merge func‐
tion, and we’ll see a few examples of how this can work in practice.

Relational Algebra
The behavior implemented in pd.merge() is a subset of what is known as relational
algebra, which is a formal set of rules for manipulating relational data, and forms the
conceptual foundation of operations available in most databases. The strength of the


146   |     Chapter 3: Data Manipulation with Pandas
