In the same way, any existing column can be modified:
    In[21]: df.eval('D = (A - B) / C', inplace=True)
            df.head()
    Out[21]:                A        B        C         D
             0       0.375506 0.406939 0.069938 -0.449425
                 1    0.069087 0.235615 0.154374 -1.078728
                 2    0.677945 0.433839 0.652324 0.374209
                 3    0.264038 0.808055 0.347197 -1.566886
                 4    0.589161 0.252418 0.557789 0.603708

Local variables in DataFrame.eval()
The DataFrame.eval() method supports an additional syntax that lets it work with
local Python variables. Consider the following:
    In[22]: column_mean = df.mean(1)
            result1 = df['A'] + column_mean
            result2 = df.eval('A + @column_mean')
            np.allclose(result1, result2)
    Out[22]: True

The @ character here marks a variable name rather than a column name, and lets you
efficiently evaluate expressions involving the two “namespaces”: the namespace of
columns, and the namespace of Python objects. Notice that this @ character is only
supported by the DataFrame.eval() method, not by the pandas.eval() function,
because the pandas.eval() function only has access to the one (Python) namespace.

DataFrame.query() Method
The DataFrame has another method based on evaluated strings, called the query()
method. Consider the following:
    In[23]: result1 = df[(df.A < 0.5) & (df.B < 0.5)]
            result2 = pd.eval('df[(df.A < 0.5) & (df.B < 0.5)]')
            np.allclose(result1, result2)
    Out[23]: True

As with the example used in our discussion of DataFrame.eval(), this is an expres‐
sion involving columns of the DataFrame. It cannot be expressed using the Data
Frame.eval() syntax, however! Instead, for this type of filtering operation, you can
use the query() method:
    In[24]: result2 = df.query('A < 0.5 and B < 0.5')
            np.allclose(result1, result2)
    Out[24]: True




                                                  High-Performance Pandas: eval() and query()   |   213
In addition to being a more efficient computation, compared to the masking expres‐
sion this is much easier to read and understand. Note that the query() method also
accepts the @ flag to mark local variables:
      In[25]: Cmean = df['C'].mean()
              result1 = df[(df.A < Cmean) & (df.B < Cmean)]
              result2 = df.query('A < @Cmean and B < @Cmean')
              np.allclose(result1, result2)
      Out[25]: True


Performance: When to Use These Functions
When considering whether to use these functions, there are two considerations: com‐
putation time and memory use. Memory use is the most predictable aspect. As already
mentioned, every compound expression involving NumPy arrays or Pandas Data
Frames will result in implicit creation of temporary arrays: For example, this:
      In[26]: x = df[(df.A < 0.5) & (df.B < 0.5)]
is roughly equivalent to this:
      In[27]: tmp1 = df.A < 0.5
              tmp2 = df.B < 0.5
              tmp3 = tmp1 & tmp2
              x = df[tmp3]

If the size of the temporary DataFrames is significant compared to your available sys‐
tem memory (typically several gigabytes), then it’s a good idea to use an eval() or
query() expression. You can check the approximate size of your array in bytes using
this:
      In[28]: df.values.nbytes
      Out[28]: 32000

On the performance side, eval() can be faster even when you are not maxing out
your system memory. The issue is how your temporary DataFrames compare to the
size of the L1 or L2 CPU cache on your system (typically a few megabytes in 2016); if
they are much bigger, then eval() can avoid some potentially slow movement of val‐
ues between the different memory caches. In practice, I find that the difference in
computation time between the traditional methods and the eval/query method is
usually not significant—if anything, the traditional method is faster for smaller
arrays! The benefit of eval/query is mainly in the saved memory, and the sometimes
cleaner syntax they offer.
We’ve covered most of the details of eval() and query() here; for more information
on these, you can refer to the Pandas documentation. In particular, different parsers
and engines can be specified for running these queries; for details on this, see the dis‐
cussion within the “Enhancing Performance” section.

214   | Chapter 3: Data Manipulation with Pandas
