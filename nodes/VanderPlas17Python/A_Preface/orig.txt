                                                                         Preface




What Is Data Science?
This is a book about doing data science with Python, which immediately begs the
question: what is data science? It’s a surprisingly hard definition to nail down, espe‐
cially given how ubiquitous the term has become. Vocal critics have variously dis‐
missed the term as a superfluous label (after all, what science doesn’t involve data?) or
a simple buzzword that only exists to salt résumés and catch the eye of overzealous
tech recruiters.
In my mind, these critiques miss something important. Data science, despite its hype-
laden veneer, is perhaps the best label we have for the cross-disciplinary set of skills
that are becoming increasingly important in many applications across industry and
academia. This cross-disciplinary piece is key: in my mind, the best existing defini‐
tion of data science is illustrated by Drew Conway’s Data Science Venn Diagram, first
published on his blog in September 2010 (see Figure P-1).




Figure P-1. Drew Conway’s Data Science Venn Diagram




                                                                                       xi
While some of the intersection labels are a bit tongue-in-cheek, this diagram captures
the essence of what I think people mean when they say “data science”: it is fundamen‐
tally an interdisciplinary subject. Data science comprises three distinct and overlap‐
ping areas: the skills of a statistician who knows how to model and summarize
datasets (which are growing ever larger); the skills of a computer scientist who can
design and use algorithms to efficiently store, process, and visualize this data; and the
domain expertise—what we might think of as “classical” training in a subject—neces‐
sary both to formulate the right questions and to put their answers in context.
With this in mind, I would encourage you to think of data science not as a new
domain of knowledge to learn, but as a new set of skills that you can apply within
your current area of expertise. Whether you are reporting election results, forecasting
stock returns, optimizing online ad clicks, identifying microorganisms in microscope
photos, seeking new classes of astronomical objects, or working with data in any
other field, the goal of this book is to give you the ability to ask and answer new ques‐
tions about your chosen subject area.

Who Is This Book For?
In my teaching both at the University of Washington and at various tech-focused
conferences and meetups, one of the most common questions I have heard is this:
“how should I learn Python?” The people asking are generally technically minded
students, developers, or researchers, often with an already strong background in writ‐
ing code and using computational and numerical tools. Most of these folks don’t want
to learn Python per se, but want to learn the language with the aim of using it as a
tool for data-intensive and computational science. While a large patchwork of videos,
blog posts, and tutorials for this audience is available online, I’ve long been frustrated
by the lack of a single good answer to this question; that is what inspired this book.
The book is not meant to be an introduction to Python or to programming in gen‐
eral; I assume the reader has familiarity with the Python language, including defining
functions, assigning variables, calling methods of objects, controlling the flow of a
program, and other basic tasks. Instead, it is meant to help Python users learn to use
Python’s data science stack—libraries such as IPython, NumPy, Pandas, Matplotlib,
Scikit-Learn, and related tools—to effectively store, manipulate, and gain insight
from data.

Why Python?
Python has emerged over the last couple decades as a first-class tool for scientific
computing tasks, including the analysis and visualization of large datasets. This may
have come as a surprise to early proponents of the Python language: the language
itself was not specifically designed with data analysis or scientific computing in mind.


xii   |   Preface
The usefulness of Python for data science stems primarily from the large and active
ecosystem of third-party packages: NumPy for manipulation of homogeneous array-
based data, Pandas for manipulation of heterogeneous and labeled data, SciPy for
common scientific computing tasks, Matplotlib for publication-quality visualizations,
IPython for interactive execution and sharing of code, Scikit-Learn for machine
learning, and many more tools that will be mentioned in the following pages.
If you are looking for a guide to the Python language itself, I would suggest the sister
project to this book, A Whirlwind Tour of the Python Language. This short report pro‐
vides a tour of the essential features of the Python language, aimed at data scientists
who already are familiar with one or more other programming languages.

Python 2 Versus Python 3
This book uses the syntax of Python 3, which contains language enhancements that
are not compatible with the 2.x series of Python. Though Python 3.0 was first released
in 2008, adoption has been relatively slow, particularly in the scientific and web devel‐
opment communities. This is primarily because it took some time for many of the
essential third-party packages and toolkits to be made compatible with the new lan‐
guage internals. Since early 2014, however, stable releases of the most important tools
in the data science ecosystem have been fully compatible with both Python 2 and 3,
and so this book will use the newer Python 3 syntax. However, the vast majority of
code snippets in this book will also work without modification in Python 2: in cases
where a Py2-incompatible syntax is used, I will make every effort to note it explicitly.

Outline of This Book
Each chapter of this book focuses on a particular package or tool that contributes a
fundamental piece of the Python data science story.
IPython and Jupyter (Chapter 1)
    These packages provide the computational environment in which many Python-
    using data scientists work.
NumPy (Chapter 2)
   This library provides the ndarray object for efficient storage and manipulation of
   dense data arrays in Python.
Pandas (Chapter 3)
   This library provides the DataFrame object for efficient storage and manipulation
   of labeled/columnar data in Python.
Matplotlib (Chapter 4)
   This library provides capabilities for a flexible range of data visualizations in
   Python.


                                                                            Preface   |   xiii
Scikit-Learn (Chapter 5)
     This library provides efficient and clean Python implementations of the most
     important and established machine learning algorithms.
The PyData world is certainly much larger than these five packages, and is growing
every day. With this in mind, I make every attempt through these pages to provide
references to other interesting efforts, projects, and packages that are pushing the
boundaries of what can be done in Python. Nevertheless, these five are currently fun‐
damental to much of the work being done in the Python data science space, and I
expect they will remain important even as the ecosystem continues growing around
them.

Using Code Examples
Supplemental material (code examples, figures, etc.) is available for download at
https://github.com/jakevdp/PythonDataScienceHandbook. This book is here to help
you get your job done. In general, if example code is offered with this book, you may
use it in your programs and documentation. You do not need to contact us for per‐
mission unless you’re reproducing a significant portion of the code. For example,
writing a program that uses several chunks of code from this book does not require
permission. Selling or distributing a CD-ROM of examples from O’Reilly books does
require permission. Answering a question by citing this book and quoting example
code does not require permission. Incorporating a significant amount of example
code from this book into your product’s documentation does require permission.
We appreciate, but do not require, attribution. An attribution usually includes the
title, author, publisher, and ISBN. For example, “Python Data Science Handbook by
Jake VanderPlas (O’Reilly). Copyright 2017 Jake VanderPlas, 978-1-491-91205-8.”
If you feel your use of code examples falls outside fair use or the permission given
above, feel free to contact us at permissions@oreilly.com.

Installation Considerations
Installing Python and the suite of libraries that enable scientific computing is
straightforward. This section will outline some of the considerations to keep in mind
when setting up your computer.
Though there are various ways to install Python, the one I would suggest for use in
data science is the Anaconda distribution, which works similarly whether you use
Windows, Linux, or Mac OS X. The Anaconda distribution comes in two flavors:

      • Miniconda gives you the Python interpreter itself, along with a command-line
        tool called conda that operates as a cross-platform package manager geared



xiv    |   Preface
    toward Python packages, similar in spirit to the apt or yum tools that Linux users
    might be familiar with.
  • Anaconda includes both Python and conda, and additionally bundles a suite of
    other preinstalled packages geared toward scientific computing. Because of the
    size of this bundle, expect the installation to consume several gigabytes of disk
    space.

Any of the packages included with Anaconda can also be installed manually on top of
Miniconda; for this reason I suggest starting with Miniconda.
To get started, download and install the Miniconda package (make sure to choose a
version with Python 3), and then install the core packages used in this book:
    [~]$ conda install numpy pandas scikit-learn matplotlib seaborn ipython-notebook
Throughout the text, we will also make use of other, more specialized tools in
Python’s scientific ecosystem; installation is usually as easy as typing conda install
packagename. For more information on conda, including information about creating
and using conda environments (which I would highly recommend), refer to conda’s
online documentation.

Conventions Used in This Book
The following typographical conventions are used in this book:
Italic
     Indicates new terms, URLs, email addresses, filenames, and file extensions.
Constant width
    Used for program listings, as well as within paragraphs to refer to program ele‐
    ments such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
Constant width bold
    Shows commands or other text that should be typed literally by the user.
Constant width italic
    Shows text that should be replaced with user-supplied values or by values deter‐
    mined by context.

O’Reilly Safari
                       Safari (formerly Safari Books Online) is a membership-based
                       training and reference platform for enterprise, government,
                       educators, and individuals.


                                                                           Preface   |   xv
Members have access to thousands of books, training videos, Learning Paths, interac‐
tive tutorials, and curated playlists from over 250 publishers, including O’Reilly
Media, Harvard Business Review, Prentice Hall Professional, Addison-Wesley Profes‐
sional, Microsoft Press, Sams, Que, Peachpit Press, Adobe, Focal Press, Cisco Press,
John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe
Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, and
Course Technology, among others.
For more information, please visit http://oreilly.com/safari.

How to Contact Us
Please address comments and questions concerning this book to the publisher:

      O’Reilly Media, Inc.
      1005 Gravenstein Highway North
      Sebastopol, CA 95472
      800-998-9938 (in the United States or Canada)
      707-829-0515 (international or local)
      707-829-0104 (fax)

We have a web page for this book, where we list errata, examples, and any additional
information. You can access this page at http://bit.ly/python-data-sci-handbook.
To comment or ask technical questions about this book, send email to bookques‐
tions@oreilly.com.
For more information about our books, courses, conferences, and news, see our web‐
site at http://www.oreilly.com.
Find us on Facebook: http://facebook.com/oreilly
Follow us on Twitter: http://twitter.com/oreillymedia
Watch us on YouTube: http://www.youtube.com/oreillymedia




xvi   |   Preface
                                                                         CHAPTER 1
                      IPython: Beyond Normal Python




There are many options for development environments for Python, and I’m often
asked which one I use in my own work. My answer sometimes surprises people: my
preferred environment is IPython plus a text editor (in my case, Emacs or Atom
depending on my mood). IPython (short for Interactive Python) was started in 2001
by Fernando Perez as an enhanced Python interpreter, and has since grown into a
project aiming to provide, in Perez’s words, “Tools for the entire lifecycle of research
computing.” If Python is the engine of our data science task, you might think of IPy‐
thon as the interactive control panel.
As well as being a useful interactive interface to Python, IPython also provides a
number of useful syntactic additions to the language; we’ll cover the most useful of
these additions here. In addition, IPython is closely tied with the Jupyter project,
which provides a browser-based notebook that is useful for development, collabora‐
tion, sharing, and even publication of data science results. The IPython notebook is
actually a special case of the broader Jupyter notebook structure, which encompasses
notebooks for Julia, R, and other programming languages. As an example of the use‐
fulness of the notebook format, look no further than the page you are reading: the
entire manuscript for this book was composed as a set of IPython notebooks.
IPython is about using Python effectively for interactive scientific and data-intensive
computing. This chapter will start by stepping through some of the IPython features
that are useful to the practice of data science, focusing especially on the syntax it
offers beyond the standard features of Python. Next, we will go into a bit more depth
on some of the more useful “magic commands” that can speed up common tasks in
creating and using data science code. Finally, we will touch on some of the features of
the notebook that make it useful in understanding data and sharing results.




                                                                                       1
