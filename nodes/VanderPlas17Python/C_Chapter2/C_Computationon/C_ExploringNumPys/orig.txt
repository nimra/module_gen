     [ 0.16666667 1.                        0.25      0.25        0.125        ]
     [ 0.16666667 1.                        0.25      0.25        0.125        ]
Looking at the execution time for our big array, we see that it completes orders of
magnitude faster than the Python loop:
     In[4]: %timeit (1.0 / big_array)
     100 loops, best of 3: 4.6 ms per loop
Vectorized operations in NumPy are implemented via ufuncs, whose main purpose is
to quickly execute repeated operations on values in NumPy arrays. Ufuncs are
extremely flexible—before we saw an operation between a scalar and an array, but we
can also operate between two arrays:
     In[5]: np.arange(5) / np.arange(1, 6)
     Out[5]: array([ 0.                     ,   0.5   ,   0.66666667,   0.75       ,   0.8   ])
And ufunc operations are not limited to one-dimensional arrays—they can act on
multidimensional arrays as well:
     In[6]: x = np.arange(9).reshape((3, 3))
            2 ** x
     Out[6]: array([[ 1,    2,   4],
                    [ 8, 16, 32],
                    [ 64, 128, 256]])
Computations using vectorization through ufuncs are nearly always more efficient
than their counterpart implemented through Python loops, especially as the arrays
grow in size. Any time you see such a loop in a Python script, you should consider
whether it can be replaced with a vectorized expression.

Exploring NumPy’s UFuncs
Ufuncs exist in two flavors: unary ufuncs, which operate on a single input, and binary
ufuncs, which operate on two inputs. We’ll see examples of both these types of func‐
tions here.

Array arithmetic
NumPy’s ufuncs feel very natural to use because they make use of Python’s native
arithmetic operators. The standard addition, subtraction, multiplication, and division
can all be used:
     In[7]: x = np.arange(4)
            print("x     =",          x)
            print("x + 5 =",          x + 5)
            print("x - 5 =",          x - 5)
            print("x * 2 =",          x * 2)




52   |   Chapter 2: Introduction to NumPy
             print("x / 2 =", x / 2)
             print("x // 2 =", x // 2)           # floor division
     x       = [0 1 2 3]
     x   + 5 = [5 6 7 8]
     x   - 5 = [-5 -4 -3 -2]
     x   * 2 = [0 2 4 6]
     x   / 2 = [ 0.   0.5 1.        1.5]
     x   // 2 = [0 0 1 1]

There is also a unary ufunc for negation, a ** operator for exponentiation, and a %
operator for modulus:
     In[8]: print("-x     = ", -x)
            print("x ** 2 = ", x ** 2)
            print("x % 2 = ", x % 2)
     -x     = [ 0 -1 -2 -3]
     x ** 2 = [0 1 4 9]
     x % 2 = [0 1 0 1]
In addition, these can be strung together however you wish, and the standard order
of operations is respected:
     In[9]: -(0.5*x + 1) ** 2
     Out[9]: array([-1.      , -2.25, -4.        , -6.25])
All of these arithmetic operations are simply convenient wrappers around specific
functions built into NumPy; for example, the + operator is a wrapper for the add
function:
     In[10]: np.add(x, 2)
     Out[10]: array([2, 3, 4, 5])
Table 2-2 lists the arithmetic operators implemented in NumPy.

Table 2-2. Arithmetic operators implemented in NumPy
Operator Equivalent ufunc      Description
+          np.add              Addition (e.g., 1 + 1 = 2)
-          np.subtract         Subtraction (e.g., 3 - 2 = 1)
-          np.negative         Unary negation (e.g., -2)
*          np.multiply         Multiplication (e.g., 2 * 3 = 6)
/          np.divide           Division (e.g., 3 / 2 = 1.5)
//         np.floor_divide Floor division (e.g., 3 // 2 = 1)
**         np.power            Exponentiation (e.g., 2 ** 3 = 8)
%          np.mod              Modulus/remainder (e.g., 9 % 4 = 1)




                                                           Computation on NumPy Arrays: Universal Functions   |   53
Additionally there are Boolean/bitwise operators; we will explore these in “Compari‐
sons, Masks, and Boolean Logic” on page 70.

Absolute value
Just as NumPy understands Python’s built-in arithmetic operators, it also understands
Python’s built-in absolute value function:
     In[11]: x = np.array([-2, -1, 0, 1, 2])
             abs(x)
     Out[11]: array([2, 1, 0, 1, 2])

The corresponding NumPy ufunc is np.absolute, which is also available under the
alias np.abs:
     In[12]: np.absolute(x)
     Out[12]: array([2, 1, 0, 1, 2])
     In[13]: np.abs(x)
     Out[13]: array([2, 1, 0, 1, 2])
This ufunc can also handle complex data, in which the absolute value returns the
magnitude:
     In[14]: x = np.array([3 - 4j, 4 - 3j, 2 + 0j, 0 + 1j])
             np.abs(x)
     Out[14]: array([ 5.,          5.,          2.,    1.])

Trigonometric functions
NumPy provides a large number of useful ufuncs, and some of the most useful for the
data scientist are the trigonometric functions. We’ll start by defining an array of
angles:
     In[15]: theta = np.linspace(0, np.pi, 3)
Now we can compute some trigonometric functions on these values:
     In[16]: print("theta                   =   ",    theta)
             print("sin(theta)              =   ",    np.sin(theta))
             print("cos(theta)              =   ",    np.cos(theta))
             print("tan(theta)              =   ",    np.tan(theta))
     theta          = [ 0.         1.57079633 3.14159265]
     sin(theta)     = [ 0.00000000e+00   1.00000000e+00   1.22464680e-16]
     cos(theta)     = [ 1.00000000e+00   6.12323400e-17 -1.00000000e+00]
     tan(theta)     = [ 0.00000000e+00   1.63312394e+16 -1.22464680e-16]
The values are computed to within machine precision, which is why values that
should be zero do not always hit exactly zero. Inverse trigonometric functions are also
available:


54   |   Chapter 2: Introduction to NumPy
    In[17]: x = [-1, 0, 1]
            print("x             =   ",   x)
            print("arcsin(x)     =   ",   np.arcsin(x))
            print("arccos(x)     =   ",   np.arccos(x))
            print("arctan(x)     =   ",   np.arctan(x))
    x              = [-1, 0, 1]
    arcsin(x)      = [-1.57079633 0.         1.57079633]
    arccos(x)      = [ 3.14159265 1.57079633 0.        ]
    arctan(x)      = [-0.78539816 0.         0.78539816]

Exponents and logarithms
Another common type of operation available in a NumPy ufunc are the exponentials:
    In[18]: x = [1, 2, 3]
            print("x      =", x)
            print("e^x    =", np.exp(x))
            print("2^x   =", np.exp2(x))
            print("3^x   =", np.power(3, x))
    x     =    [1, 2, 3]
    e^x   =    [ 2.71828183     7.3890561      20.08553692]
    2^x   =    [ 2. 4. 8.]
    3^x   =    [ 3 9 27]

The inverse of the exponentials, the logarithms, are also available. The basic np.log
gives the natural logarithm; if you prefer to compute the base-2 logarithm or the
base-10 logarithm, these are available as well:
    In[19]: x = [1, 2, 4, 10]
            print("x        =",      x)
            print("ln(x)    =",      np.log(x))
            print("log2(x) =",       np.log2(x))
            print("log10(x) =",      np.log10(x))
    x          =   [1, 2, 4, 10]
    ln(x)      =   [ 0.          0.69314718      1.38629436 2.30258509]
    log2(x)    =   [ 0.          1.              2.         3.32192809]
    log10(x)   =   [ 0.          0.30103         0.60205999 1.        ]
There are also some specialized versions that are useful for maintaining precision
with very small input:
    In[20]: x = [0, 0.001, 0.01, 0.1]
            print("exp(x) - 1 =", np.expm1(x))
            print("log(1 + x) =", np.log1p(x))
    exp(x) - 1 = [ 0.                0.0010005     0.01005017 0.10517092]
    log(1 + x) = [ 0.                0.0009995     0.00995033 0.09531018]

When x is very small, these functions give more precise values than if the raw np.log
or np.exp were used.



                                                  Computation on NumPy Arrays: Universal Functions   |   55
Specialized ufuncs
NumPy has many more ufuncs available, including hyperbolic trig functions, bitwise
arithmetic, comparison operators, conversions from radians to degrees, rounding and
remainders, and much more. A look through the NumPy documentation reveals a lot
of interesting functionality.
Another excellent source for more specialized and obscure ufuncs is the submodule
scipy.special. If you want to compute some obscure mathematical function on
your data, chances are it is implemented in scipy.special. There are far too many
functions to list them all, but the following snippet shows a couple that might come
up in a statistics context:
     In[21]: from scipy import special
     In[22]: # Gamma functions (generalized factorials) and related functions
             x = [1, 5, 10]
             print("gamma(x)     =", special.gamma(x))
             print("ln|gamma(x)| =", special.gammaln(x))
             print("beta(x, 2)   =", special.beta(x, 2))
     gamma(x)     = [ 1.00000000e+00   2.40000000e+01  3.62880000e+05]
     ln|gamma(x)| = [ 0.           3.17805383 12.80182748]
     beta(x, 2)   = [ 0.5        0.03333333 0.00909091]
     In[23]: # Error function (integral of Gaussian)
             # its complement, and its inverse
             x = np.array([0, 0.3, 0.7, 1.0])
             print("erf(x) =", special.erf(x))
             print("erfc(x) =", special.erfc(x))
             print("erfinv(x) =", special.erfinv(x))
     erf(x) = [ 0.                    0.32862676 0.67780119 0.84270079]
     erfc(x) = [ 1.                   0.67137324 0.32219881 0.15729921]
     erfinv(x) = [ 0.                   0.27246271 0.73286908        inf]

There are many, many more ufuncs available in both NumPy and scipy.special.
Because the documentation of these packages is available online, a web search along
the lines of “gamma function python” will generally find the relevant information.

Advanced Ufunc Features
Many NumPy users make use of ufuncs without ever learning their full set of features.
We’ll outline a few specialized features of ufuncs here.

Specifying output
For large calculations, it is sometimes useful to be able to specify the array where the
result of the calculation will be stored. Rather than creating a temporary array, you
can use this to write computation results directly to the memory location where you’d



56   |   Chapter 2: Introduction to NumPy
