Figure 4-28. Customizing errorbars

In addition to these options, you can also specify horizontal errorbars (xerr), one-
sided errorbars, and many other variants. For more information on the options avail‐
able, refer to the docstring of plt.errorbar.

Continuous Errors
In some situations it is desirable to show errorbars on continuous quantities. Though
Matplotlib does not have a built-in convenience routine for this type of application,
it’s relatively easy to combine primitives like plt.plot and plt.fill_between for a
useful result.
Here we’ll perform a simple Gaussian process regression (GPR), using the Scikit-Learn
API (see “Introducing Scikit-Learn” on page 343 for details). This is a method of fit‐
ting a very flexible nonparametric function to data with a continuous measure of the
uncertainty. We won’t delve into the details of Gaussian process regression at this
point, but will focus instead on how you might visualize such a continuous error
measurement:
    In[4]: from sklearn.gaussian_process import GaussianProcess

           # define the model and draw some data
           model = lambda x: x * np.sin(x)
           xdata = np.array([1, 3, 5, 6, 8])
           ydata = model(xdata)

           # Compute the Gaussian process fit
           gp = GaussianProcess(corr='cubic', theta0=1e-2, thetaL=1e-4, thetaU=1E-1,
                                random_start=100)
           gp.fit(xdata[:, np.newaxis], ydata)

           xfit = np.linspace(0, 10, 1000)
           yfit, MSE = gp.predict(xfit[:, np.newaxis], eval_MSE=True)
           dyfit = 2 * np.sqrt(MSE) # 2*sigma ~ 95% confidence region



                                                                  Visualizing Errors   |   239
We now have xfit, yfit, and dyfit, which sample the continuous fit to our data. We
could pass these to the plt.errorbar function as above, but we don’t really want to
plot 1,000 points with 1,000 errorbars. Instead, we can use the plt.fill_between
function with a light color to visualize this continuous error (Figure 4-29):
      In[5]: # Visualize the result
             plt.plot(xdata, ydata, 'or')
             plt.plot(xfit, yfit, '-', color='gray')

               plt.fill_between(xfit, yfit - dyfit, yfit + dyfit,
                                color='gray', alpha=0.2)
               plt.xlim(0, 10);




Figure 4-29. Representing continuous uncertainty with filled regions

Note what we’ve done here with the fill_between function: we pass an x value, then
the lower y-bound, then the upper y-bound, and the result is that the area between
these regions is filled.
The resulting figure gives a very intuitive view into what the Gaussian process regres‐
sion algorithm is doing: in regions near a measured data point, the model is strongly
constrained and this is reflected in the small model errors. In regions far from a
measured data point, the model is not strongly constrained, and the model errors
increase.
For more information on the options available in plt.fill_between() (and the
closely related plt.fill() function), see the function docstring or the Matplotlib
documentation.
Finally, if this seems a bit too low level for your taste, refer to “Visualization with Sea‐
born” on page 311, where we discuss the Seaborn package, which has a more stream‐
lined API for visualizing this type of continuous errorbar.




240   |   Chapter 4: Visualization with Matplotlib
Density and Contour Plots
Sometimes it is useful to display three-dimensional data in two dimensions using
contours or color-coded regions. There are three Matplotlib functions that can be
helpful for this task: plt.contour for contour plots, plt.contourf for filled contour
plots, and plt.imshow for showing images. This section looks at several examples of
using these. We’ll start by setting up the notebook for plotting and importing the
functions we will use:
    In[1]: %matplotlib inline
           import matplotlib.pyplot as plt
           plt.style.use('seaborn-white')
           import numpy as np


Visualizing a Three-Dimensional Function
We’ll start by demonstrating a contour plot using a function z = f x, y , using the fol‐
lowing particular choice for f (we’ve seen this before in “Computation on Arrays:
Broadcasting” on page 63, when we used it as a motivating example for array
broadcasting):
    In[2]: def f(x, y):
               return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)

A contour plot can be created with the plt.contour function. It takes three argu‐
ments: a grid of x values, a grid of y values, and a grid of z values. The x and y values
represent positions on the plot, and the z values will be represented by the contour
levels. Perhaps the most straightforward way to prepare such data is to use the
np.meshgrid function, which builds two-dimensional grids from one-dimensional
arrays:
    In[3]: x = np.linspace(0, 5, 50)
           y = np.linspace(0, 5, 40)

           X, Y = np.meshgrid(x, y)
           Z = f(X, Y)
Now let’s look at this with a standard line-only contour plot (Figure 4-30):
    In[4]: plt.contour(X, Y, Z, colors='black');




                                                              Density and Contour Plots   |   241
