Profiling and Timing Code
In the process of developing code and creating data processing pipelines, there are
often trade-offs you can make between various implementations. Early in developing
your algorithm, it can be counterproductive to worry about such things. As Donald
Knuth famously quipped, “We should forget about small efficiencies, say about 97%
of the time: premature optimization is the root of all evil.”
But once you have your code working, it can be useful to dig into its efficiency a bit.
Sometimes it’s useful to check the execution time of a given command or set of com‐
mands; other times it’s useful to dig into a multiline process and determine where the
bottleneck lies in some complicated series of operations. IPython provides access to a
wide array of functionality for this kind of timing and profiling of code. Here we’ll
discuss the following IPython magic commands:
%time
    Time the execution of a single statement
%timeit
    Time repeated execution of a single statement for more accuracy
%prun
    Run code with the profiler
%lprun
    Run code with the line-by-line profiler
%memit
    Measure the memory use of a single statement
%mprun
    Run code with the line-by-line memory profiler
The last four commands are not bundled with IPython—you’ll need to install the
line_profiler and memory_profiler extensions, which we will discuss in the fol‐
lowing sections.

Timing Code Snippets: %timeit and %time
We saw the %timeit line magic and %%timeit cell magic in the introduction to magic
functions in “IPython Magic Commands” on page 10; %%timeit can be used to time
the repeated execution of snippets of code:
    In[1]: %timeit sum(range(100))
    100000 loops, best of 3: 1.54 µs per loop




                                                             Profiling and Timing Code   |   25
Note that because this operation is so fast, %timeit automatically does a large number
of repetitions. For slower commands, %timeit will automatically adjust and perform
fewer repetitions:
     In[2]: %%timeit
            total = 0
            for i in range(1000):
                for j in range(1000):
                     total += i * (-1) ** j
     1 loops, best of 3: 407 ms per loop
Sometimes repeating an operation is not the best option. For example, if we have a
list that we’d like to sort, we might be misled by a repeated operation. Sorting a pre-
sorted list is much faster than sorting an unsorted list, so the repetition will skew the
result:
     In[3]: import random
            L = [random.random() for i in range(100000)]
            %timeit L.sort()
     100 loops, best of 3: 1.9 ms per loop

For this, the %time magic function may be a better choice. It also is a good choice for
longer-running commands, when short, system-related delays are unlikely to affect
the result. Let’s time the sorting of an unsorted and a presorted list:
     In[4]: import random
            L = [random.random() for i in range(100000)]
            print("sorting an unsorted list:")
            %time L.sort()
     sorting an unsorted list:
     CPU times: user 40.6 ms, sys: 896 µs, total: 41.5 ms
     Wall time: 41.5 ms
     In[5]: print("sorting an already sorted list:")
            %time L.sort()
     sorting an already sorted list:
     CPU times: user 8.18 ms, sys: 10 µs, total: 8.19 ms
     Wall time: 8.24 ms
Notice how much faster the presorted list is to sort, but notice also how much longer
the timing takes with %time versus %timeit, even for the presorted list! This is a
result of the fact that %timeit does some clever things under the hood to prevent sys‐
tem calls from interfering with the timing. For example, it prevents cleanup of unused
Python objects (known as garbage collection) that might otherwise affect the timing.
For this reason, %timeit results are usually noticeably faster than %time results.
For %time as with %timeit, using the double-percent-sign cell-magic syntax allows
timing of multiline scripts:


26   |   Chapter 1: IPython: Beyond Normal Python
    In[6]: %%time
           total = 0
           for i in range(1000):
               for j in range(1000):
                   total += i * (-1) ** j
    CPU times: user 504 ms, sys: 979 µs, total: 505 ms
    Wall time: 505 ms

For more information on %time and %timeit, as well as their available options, use
the IPython help functionality (i.e., type %time? at the IPython prompt).

Profiling Full Scripts: %prun
A program is made of many single statements, and sometimes timing these state‐
ments in context is more important than timing them on their own. Python contains
a built-in code profiler (which you can read about in the Python documentation), but
IPython offers a much more convenient way to use this profiler, in the form of the
magic function %prun.
By way of example, we’ll define a simple function that does some calculations:
    In[7]: def sum_of_lists(N):
               total = 0
               for i in range(5):
                   L = [j ^ (j >> i) for j in range(N)]
                   total += sum(L)
               return total

Now we can call %prun with a function call to see the profiled results:
    In[8]: %prun sum_of_lists(1000000)
In the notebook, the output is printed to the pager, and looks something like this:
    14 function calls in 0.714 seconds

       Ordered by: internal time

       ncalls   tottime   percall   cumtime   percall   filename:lineno(function)
            5     0.599     0.120     0.599     0.120   <ipython-input-19>:4(<listcomp>)
            5     0.064     0.013     0.064     0.013   {built-in method sum}
            1     0.036     0.036     0.699     0.699   <ipython-input-19>:1(sum_of_lists)
            1     0.014     0.014     0.714     0.714   <string>:1(<module>)
            1     0.000     0.000     0.714     0.714   {built-in method exec}
The result is a table that indicates, in order of total time on each function call, where
the execution is spending the most time. In this case, the bulk of execution time is in
the list comprehension inside sum_of_lists. From here, we could start thinking
about what changes we might make to improve the performance in the algorithm.




                                                                  Profiling and Timing Code   |   27
