     <ipython-input-1-d849e34d61fb> in func1(a=1, b=0)
           1 def func1(a, b):
     ----> 2     return a / b
             a = 1
             b = 0
           3
           4 def func2(x):
           5     a = x


     ZeroDivisionError: division by zero
This extra information can help you narrow in on why the exception is being raised.
So why not use the Verbose mode all the time? As code gets complicated, this kind of
traceback can get extremely long. Depending on the context, sometimes the brevity of
Default mode is easier to work with.

Debugging: When Reading Tracebacks Is Not Enough
The standard Python tool for interactive debugging is pdb, the Python debugger. This
debugger lets the user step through the code line by line in order to see what might be
causing a more difficult error. The IPython-enhanced version of this is ipdb, the
IPython debugger.
There are many ways to launch and use both these debuggers; we won’t cover them
fully here. Refer to the online documentation of these two utilities to learn more.
In IPython, perhaps the most convenient interface to debugging is the %debug magic
command. If you call it after hitting an exception, it will automatically open an inter‐
active debugging prompt at the point of the exception. The ipdb prompt lets you
explore the current state of the stack, explore the available variables, and even run
Python commands!
Let’s look at the most recent exception, then do some basic tasks—print the values of
a and b, and type quit to quit the debugging session:
     In[7]: %debug
     > <ipython-input-1-d849e34d61fb>(2)func1()
           1 def func1(a, b):
     ----> 2     return a / b
           3

     ipdb> print(a)
     1
     ipdb> print(b)
     0
     ipdb> quit



22   |   Chapter 1: IPython: Beyond Normal Python
The interactive debugger allows much more than this, though—we can even step up
and down through the stack and explore the values of variables there:
   In[8]: %debug
   > <ipython-input-1-d849e34d61fb>(2)func1()
         1 def func1(a, b):
   ----> 2     return a / b
         3

   ipdb> up
   > <ipython-input-1-d849e34d61fb>(7)func2()
         5     a = x
         6     b = x - 1
   ----> 7     return func1(a, b)

   ipdb> print(x)
   1
   ipdb> up
   > <ipython-input-6-b2e110f6fc8f>(1)<module>()
   ----> 1 func2(1)

   ipdb> down
   > <ipython-input-1-d849e34d61fb>(7)func2()
         5     a = x
         6     b = x - 1
   ----> 7     return func1(a, b)

   ipdb> quit
This allows you to quickly find out not only what caused the error, but also what
function calls led up to the error.
If you’d like the debugger to launch automatically whenever an exception is raised,
you can use the %pdb magic function to turn on this automatic behavior:
   In[9]: %xmode Plain
          %pdb on
          func2(1)
   Exception reporting mode: Plain
   Automatic pdb calling has been turned ON


   Traceback (most recent call last):


     File "<ipython-input-9-569a67d2d312>", line 3, in <module>
       func2(1)


     File "<ipython-input-1-d849e34d61fb>", line 7, in func2
       return func1(a, b)



                                                               Errors and Debugging   |   23
         File "<ipython-input-1-d849e34d61fb>", line 2, in func1
           return a / b


     ZeroDivisionError: division by zero



     > <ipython-input-1-d849e34d61fb>(2)func1()
           1 def func1(a, b):
     ----> 2     return a / b
           3

     ipdb> print(b)
     0
     ipdb> quit
Finally, if you have a script that you’d like to run from the beginning in interactive
mode, you can run it with the command %run -d, and use the next command to step
through the lines of code interactively.

Partial list of debugging commands
There are many more available commands for interactive debugging than we’ve listed
here; the following table contains a description of some of the more common and
useful ones:

Command          Description
list             Show the current location in the file
h(elp)           Show a list of commands, or find help on a specific command
q(uit)           Quit the debugger and the program
c(ontinue) Quit the debugger; continue in the program
n(ext)           Go to the next step of the program
<enter>          Repeat the previous command
p(rint)          Print variables
s(tep)           Step into a subroutine
r(eturn)         Return out of a subroutine


For more information, use the help command in the debugger, or take a look at
ipdb’s online documentation.




24   |   Chapter 1: IPython: Beyond Normal Python
Profiling and Timing Code
In the process of developing code and creating data processing pipelines, there are
often trade-offs you can make between various implementations. Early in developing
your algorithm, it can be counterproductive to worry about such things. As Donald
Knuth famously quipped, “We should forget about small efficiencies, say about 97%
of the time: premature optimization is the root of all evil.”
But once you have your code working, it can be useful to dig into its efficiency a bit.
Sometimes it’s useful to check the execution time of a given command or set of com‐
mands; other times it’s useful to dig into a multiline process and determine where the
bottleneck lies in some complicated series of operations. IPython provides access to a
wide array of functionality for this kind of timing and profiling of code. Here we’ll
discuss the following IPython magic commands:
%time
    Time the execution of a single statement
%timeit
    Time repeated execution of a single statement for more accuracy
%prun
    Run code with the profiler
%lprun
    Run code with the line-by-line profiler
%memit
    Measure the memory use of a single statement
%mprun
    Run code with the line-by-line memory profiler
The last four commands are not bundled with IPython—you’ll need to install the
line_profiler and memory_profiler extensions, which we will discuss in the fol‐
lowing sections.

Timing Code Snippets: %timeit and %time
We saw the %timeit line magic and %%timeit cell magic in the introduction to magic
functions in “IPython Magic Commands” on page 10; %%timeit can be used to time
the repeated execution of snippets of code:
    In[1]: %timeit sum(range(100))
    100000 loops, best of 3: 1.54 µs per loop




                                                             Profiling and Timing Code   |   25
