webpackJsonp([0x70bcbd56c4c5],{577:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Enlight",author:"Samay Shamdasani"}},markdownRemark:{id:"/opt/build/repo/content/projects/neural-network/index.md absPath of file >>> MarkdownRemark",html:'<h2>What is a Neural Network?</h2>\n<p>Before we get started with the <em>how</em> of building a Neural Network, we need to understand the <em>what</em> first.</p>\n<p>Neural networks can be intimidating, especially for people new to machine learning. However, this tutorial will break down how exactly a neural network works and you will have a working flexible neural network by the end. Let’s get started!</p>\n<h3>Understanding the process</h3>\n<p>With approximately 100 billion neurons, the human brain processes data at speeds as fast as 268 mph! In essence, a neural network is a collection of <strong>neurons</strong> connected by <strong>synapses</strong>. This collection is organized into three main layers: the input layer, the hidden layer, and the output layer. You can have many hidden layers, which is where the term <strong>deep learning</strong> comes into play. In an artifical neural network, there are several inputs, which are called <strong>features</strong>, and produce a single output, which is called a <strong>label</strong>.</p>\n<img src="/img/FeedForwardNeuralNetwork.svg" class="img">\n<div class="tr">\n<sup>Image via <a href="https://blog.kabir.sh/posts/machine-learning">Kabir Shah</a></sup><br>\n</div>\n<p>The circles represent neurons while the lines represent synapses. The role of a synapse is to multiply the inputs and <strong>weights</strong>. You can think of weights as the “strength” of the connection between neurons. Weights primarily define the output of a neural network. However, they are highly flexible. After, an activation function is applied to return an output.</p>\n<p>Here’s a brief overview of how a simple feedforward neural network works:</p>\n<ol>\n<li>\n<p>Takes inputs as a matrix (2D array of numbers)</p>\n</li>\n<li>\n<p>Multiplies the input by a set weights (performs a <a href="https://www.khanacademy.org/math/precalculus/precalc-matrices/multiplying-matrices-by-matrices/v/matrix-multiplication-intro">dot product</a> aka matrix multiplication)</p>\n</li>\n<li>\n<p>Applies an activation function</p>\n</li>\n<li>\n<p>Returns an output</p>\n</li>\n<li>\n<p>Error is calculated by taking the difference from the desired output from the data and the predicted output. This creates our gradient descent, which we can use to alter the weights</p>\n</li>\n<li>\n<p>The weights are then altered slightly according to the error.</p>\n</li>\n<li>\n<p>To train, this process is repeated 1,000+ times. The more the data is trained upon, the more accurate our outputs will be.</p>\n</li>\n</ol>\n<p>At its core, neural networks are simple. They just perform a dot product with the input and weights and apply an activation function. When weights are adjusted via the gradient of loss function, the network adapts to the changes to produce more accurate outputs.</p>\n<p>Our neural network will model a single hidden layer with three inputs and one output. In the network, we will be predicting the score of our exam based on the inputs of how many hours we studied and how many hours we slept the day before. Our test score is the output. Here’s our sample data of what we’ll be training our Neural Network on:</p>\n<table class="collapse ba br2 b--black-10 pv2 ph3 mw6 center">\n  <tr class="striped--light-gray "><th class="pv2 ph3 tl f6 fw6 ttu">Hours Studied, Hours Slept (input)</th><th class="tr f6 ttu fw6 pv2 ph3">Test Score (output)</th></tr>\n  <tr class="striped--light-gray "><td class="pv2 ph3">2, 9</td><td class="pv2 ph3 tr">92</td></tr>\n  <tr class="striped--light-gray "><td class="pv2 ph3">1, 5</td><td class="pv2 ph3 tr">86</td></tr>\n  <tr class="striped--light-gray "><td class="pv2 ph3">3, 6</td><td class="pv2 ph3 tr">89</td></tr>\n  <tr class="striped--light-gray "><td class="pv2 ph3">5, 10</td><td class="pv2 ph3 tr">?</td></tr>\n</table>\n<div class="tc pt2">\n<sup>Original example via <a href="https://www.youtube.com/watch?v=UJwK6jAStmg">Welch Labs</a></sup><br>\n</div>\n<p>As you may have noticed, the <code class="language-text">?</code> in this case represents what we want our neural network to predict. In this case, we are predicting the test score of someone who studied for five hours and slept for ten hours based on their prior performance.</p>\n<h2>Forward Propagation</h2>\n<p>Let’s start coding this bad boy! Open up a new python file. You’ll want to import <code class="language-text">numpy</code> as it will help us with certain calculations.</p>\n<p>First, let’s import our data as numpy arrays using <code class="language-text">np.array</code>. We’ll also want to scale (normalize) our data by dividing each data point by the maximum value along each axis of the <code class="language-text">xAll</code> array. For example, for our <code class="language-text">xAll</code> array, <code class="language-text">2, 1, and 3</code> will all be divided by <code class="language-text">5</code> and <code class="language-text">9, 5, and 6</code> will be divided by <code class="language-text">10</code>. We do the same for our <code class="language-text">y</code> output array. Then, we can split our input data into training and testing data. The first three data points are what we will train the network on. Then, we will ask the network to predict the test score for someone who studies for five hours and sleeps for 10 hours as evident in the <code class="language-text">xPredicted</code> array.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n\n<span class="token comment"># X = (hours studying, hours sleeping), y = score on test</span>\nxAll <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># input data</span>\ny <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># output</span>\n\n<span class="token comment"># scale units</span>\nxAll <span class="token operator">=</span> xAll<span class="token operator">/</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># scaling input data</span>\ny <span class="token operator">=</span> y<span class="token operator">/</span><span class="token number">100</span> <span class="token comment"># scaling output data (max test score is 100)</span>\n\n<span class="token comment"># split data</span>\nX <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># training data</span>\nxPredicted <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># testing data</span></code></pre>\n      </div>\n<p>Next, let’s define a python <code class="language-text">class</code> and write an <code class="language-text">init</code> function where we’ll specify our parameters such as the input, hidden, and output layers.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Neural_Network</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment">#parameters</span>\n    self<span class="token punctuation">.</span>inputSize <span class="token operator">=</span> <span class="token number">2</span>\n    self<span class="token punctuation">.</span>outputSize <span class="token operator">=</span> <span class="token number">1</span>\n    self<span class="token punctuation">.</span>hiddenSize <span class="token operator">=</span> <span class="token number">3</span></code></pre>\n      </div>\n<p>It is time for our first calculation. Remember that our synapses perform a <a href="https://www.khanacademy.org/math/precalculus/precalc-matrices/multiplying-matrices-by-matrices/v/matrix-multiplication-intro">dot product</a>, or matrix multiplication of the input and weight. Note that weights are generated randomly and between 0 and 1.</p>\n<h3>The calculations behind our network</h3>\n<p>In the data set, our input data, <code class="language-text">X</code>, is a 3x2 matrix. Our output data, <code class="language-text">y</code>, is a 3x1 matrix. Each element in matrix <code class="language-text">X</code> needs to be multiplied by a corresponding weight and then added together with all the other results for each neuron in the hidden layer. Here’s how the first input data element (2 hours studying and 9 hours sleeping) would calculate an output in the network:</p>\n<img src="/img/nn-calc.png" class="img">\n<p>This image breaks down what our neural network actually does to produce an output. First, the products of the random generated weights (.2, .6, .1, .8, .3, .7) on each synapse and the corresponding inputs are summed to arrive as the first values of the hidden layer. These sums are in a smaller font as they are not the final values for the hidden layer.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">.2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token number">.8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7.6</span>\n<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">.6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token number">.3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3.9</span>\n<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">.1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">*</span> <span class="token number">.7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6.5</span></code></pre>\n      </div>\n<p>To get the final value for the hidden layer, we need to apply the <a href="https://en.wikipedia.org/wiki/Activation_function">activation function</a>. The role of an activation function is to introduce nonlinearity. An advantage of this is that the output is mapped from a range of 0 and 1, making it easier to alter weights in the future.</p>\n<p>There are many activation functions out there. In this case, we’ll stick to one of the more popular ones - the sigmoid function.</p>\n<img src="/img/sigmoid.png" class="img">\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">S<span class="token punctuation">(</span><span class="token number">7.6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.999499799</span>\nS<span class="token punctuation">(</span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.000553084</span>\nS<span class="token punctuation">(</span><span class="token number">6.5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.998498818</span></code></pre>\n      </div>\n<p>Now, we need to use matrix multiplication again, with another set of random weights, to calculate our output layer value.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">.9994</span> <span class="token operator">*</span> <span class="token number">.4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.000</span> <span class="token operator">*</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">.9984</span> <span class="token operator">*</span> <span class="token number">.9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.79832</span></code></pre>\n      </div>\n<p>Lastly, to normalize the output, we just apply the activation function again.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">S<span class="token punctuation">(</span><span class="token number">1.79832</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">.8579443067</span></code></pre>\n      </div>\n<p>And, there you go! Theoretically, with those weights, our neural network will calculate <code class="language-text">.85</code> as our test score! However, our target was <code class="language-text">.92</code>. Our result wasn’t poor, it just isn’t the best it can be. We just got a little lucky when I chose the random weights for this example.</p>\n<p>How do we train our model to learn? Well, we’ll find out very soon. For now, let’s countinue coding our network.</p>\n<p>If you are still confused, I highly reccomend you check out <a href="https://www.youtube.com/watch?v=UJwK6jAStmg">this</a> informative video which explains the structure of a neural network with the same example.</p>\n<h3>Implementing the calculations</h3>\n<p>Now, let’s generate our weights randomly using <code class="language-text">np.random.randn()</code>. Remember, we’ll need two sets of weights. One to go from the input to the hidden layer, and the other to go from the hidden to output layer.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token comment">#weights</span>\nself<span class="token punctuation">.</span>W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inputSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">)</span> <span class="token comment"># (3x2) weight matrix from input to hidden layer</span>\nself<span class="token punctuation">.</span>W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>outputSize<span class="token punctuation">)</span> <span class="token comment"># (3x1) weight matrix from hidden to output layer</span></code></pre>\n      </div>\n<p>Once we have all the variables set up, we are ready to write our <code class="language-text">forward</code> propagation function. Let’s pass in our input, <code class="language-text">X</code>, and in this example, we can use the variable <code class="language-text">z</code> to simulate the activity between the input and output layers. As explained, we need to take a dot product of the inputs and weights, apply an activation function, take another dot product of the hidden layer and second set of weights, and lastly apply a final activation function to recieve our output:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token comment">#forward propagation through our network</span>\n  self<span class="token punctuation">.</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W1<span class="token punctuation">)</span> <span class="token comment"># dot product of X (input) and first set of 3x2 weights</span>\n  self<span class="token punctuation">.</span>z2 <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment"># activation function</span>\n  self<span class="token punctuation">.</span>z3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W2<span class="token punctuation">)</span> <span class="token comment"># dot product of hidden layer (z2) and second set of 3x1 weights</span>\n  o <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z3<span class="token punctuation">)</span> <span class="token comment"># final activation function</span>\n  <span class="token keyword">return</span> o</code></pre>\n      </div>\n<p>Lastly, we need to define our sigmoid function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token comment"># activation function</span>\n  <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>And, there we have it! A (untrained) neural network capable of producing an output.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n\n<span class="token comment"># X = (hours studying, hours sleeping), y = score on test</span>\nxAll <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># input data</span>\ny <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># output</span>\n\n<span class="token comment"># scale units</span>\nxAll <span class="token operator">=</span> xAll<span class="token operator">/</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># scaling input data</span>\ny <span class="token operator">=</span> y<span class="token operator">/</span><span class="token number">100</span> <span class="token comment"># scaling output data (max test score is 100)</span>\n\n<span class="token comment"># split data</span>\nX <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># training data</span>\nxPredicted <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># testing data</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Neural_Network</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment">#parameters</span>\n    self<span class="token punctuation">.</span>inputSize <span class="token operator">=</span> <span class="token number">2</span>\n    self<span class="token punctuation">.</span>outputSize <span class="token operator">=</span> <span class="token number">1</span>\n    self<span class="token punctuation">.</span>hiddenSize <span class="token operator">=</span> <span class="token number">3</span>\n\n    <span class="token comment">#weights</span>\n    self<span class="token punctuation">.</span>W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inputSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">)</span> <span class="token comment"># (3x2) weight matrix from input to hidden layer</span>\n    self<span class="token punctuation">.</span>W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>outputSize<span class="token punctuation">)</span> <span class="token comment"># (3x1) weight matrix from hidden to output layer</span>\n\n  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment">#forward propagation through our network</span>\n    self<span class="token punctuation">.</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W1<span class="token punctuation">)</span> <span class="token comment"># dot product of X (input) and first set of 3x2 weights</span>\n    self<span class="token punctuation">.</span>z2 <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment"># activation function</span>\n    self<span class="token punctuation">.</span>z3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W2<span class="token punctuation">)</span> <span class="token comment"># dot product of hidden layer (z2) and second set of 3x1 weights</span>\n    o <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z3<span class="token punctuation">)</span> <span class="token comment"># final activation function</span>\n    <span class="token keyword">return</span> o\n\n  <span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># activation function</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nNN <span class="token operator">=</span> Neural_Network<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">#defining our output</span>\no <span class="token operator">=</span> NN<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n\n<span class="token keyword">print</span> <span class="token string">"Predicted Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>\n<span class="token keyword">print</span> <span class="token string">"Actual Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>As you may have noticed, we need to train our network to calculate more accurate results.</p>\n<h2>Backpropagation</h2>\n<h3>The “learning” of our network</h3>\n<p>Since we have a random set of weights, we need to alter them to make our inputs equal to the corresponding outputs from our data set. This is done through a method called backpropagation.</p>\n<p>Backpropagation works by using a <strong>loss</strong> function to calculate how far the network was from the target output.</p>\n<h4>Calculating error</h4>\n<p>One way of representing the loss function is by using the <strong>mean sum squared loss</strong> function:</p>\n<img src="/img/loss.png" class="img">\n<p>In this function, <code class="language-text">o</code> is our predicted output, and <code class="language-text">y</code> is our actual output. The mean sum squared loss function is the sum, over all the data points, of the square of the difference between the predicted and actual target variables, divided by the number of data points.</p>\n<p>Now that we have the loss function, our goal is to get it as close as we can to 0. That means we will need to have close to no loss at all. As we are training our network, all we are doing is minimizing the loss.</p>\n<p>To figure out which direction to alter our weights, we need to find the rate of change of our loss with respect to our weights. In other words, we need to use the derivative of the loss function to understand how the weights affect the input.</p>\n<p>In this case, we will be using a partial derivative to allow us to take into account another variable.</p>\n<img src="/img/weightToLoss.svg" class="img">\n<div class="tr">\n<sup>Image via <a href="https://blog.kabir.sh/posts/machine-learning">Kabir Shah</a></sup><br>\n</div>\n<p>This method is known as <strong>gradient descent</strong>. By knowing which way to alter our weights, our outputs can only get more accurate.</p>\n<p>Here’s how we will calculate the incremental change to our weights:</p>\n<ol>\n<li>\n<p>Find the <strong>margin of error</strong> of the output layer (o) by taking the difference of the predicted output and the actual output (y)</p>\n</li>\n<li>\n<p>Apply the derivative of our sigmoid activation function to the output layer error. We call this result the <strong>delta output sum</strong>.</p>\n</li>\n<li>\n<p>Use the delta output sum of the output layer error to figure out how much our z<sup>2</sup> (hidden) layer contributed to the output error by performing a dot product with our second weight matrix. We can call this the z<sup>2</sup> error.</p>\n</li>\n<li>\n<p>Calculate the delta output sum for the z<sup>2</sup> layer by applying the derivative of our sigmoid activation function (just like step 2).</p>\n</li>\n<li>\n<p>Adjust the weights for the first layer by performing a <strong>dot product of the input layer</strong> with the <strong>hidden (z<sup>2</sup>) delta output sum</strong>. For the second layer, perform a dot product of the hidden(z<sup>2</sup>) layer and the <strong>output (o) delta output sum</strong>.</p>\n</li>\n</ol>\n<p>Calculating the delta output sum and then applying the derivative of the sigmoid function are very important to backpropagation. The derivative of the sigmoid, also known as <strong>sigmoid prime</strong>, will give us the rate of change, or slope, of the activation function at output sum.</p>\n<p>Let’s continue to code our <code class="language-text">Neural_Network</code> class by adding a sigmoidPrime (derivative of sigmoid) function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoidPrime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token comment">#derivative of sigmoid</span>\n  <span class="token keyword">return</span> s <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Then, we’ll want to create our <code class="language-text">backward</code> propagation function that does everything specified in the four steps above:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token comment"># backward propagate through the network</span>\n  self<span class="token punctuation">.</span>o_error <span class="token operator">=</span> y <span class="token operator">-</span> o <span class="token comment"># error in output</span>\n  self<span class="token punctuation">.</span>o_delta <span class="token operator">=</span> self<span class="token punctuation">.</span>o_error<span class="token operator">*</span>self<span class="token punctuation">.</span>sigmoidPrime<span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment"># applying derivative of sigmoid to error</span>\n\n  self<span class="token punctuation">.</span>z2_error <span class="token operator">=</span> self<span class="token punctuation">.</span>o_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W2<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token comment"># z2 error: how much our hidden layer weights contributed to output error</span>\n  self<span class="token punctuation">.</span>z2_delta <span class="token operator">=</span> self<span class="token punctuation">.</span>z2_error<span class="token operator">*</span>self<span class="token punctuation">.</span>sigmoidPrime<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2<span class="token punctuation">)</span> <span class="token comment"># applying derivative of sigmoid to z2 error</span>\n\n  self<span class="token punctuation">.</span>W1 <span class="token operator">+=</span> X<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2_delta<span class="token punctuation">)</span> <span class="token comment"># adjusting first set (input --> hidden) weights</span>\n  self<span class="token punctuation">.</span>W2 <span class="token operator">+=</span> self<span class="token punctuation">.</span>z2<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>o_delta<span class="token punctuation">)</span> <span class="token comment"># adjusting second set (hidden --> output) weights</span></code></pre>\n      </div>\n<p>We can now define our output through initiating foward propagation and intiate the backward function by calling it in the <code class="language-text">train</code> function:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  o <span class="token operator">=</span> self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n  self<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> o<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>To run the network, all we have to do is to run the <code class="language-text">train</code> function. Of course, we’ll want to do this multiple, or maybe thousands, of times. So, we’ll use a <code class="language-text">for</code> loop.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">NN <span class="token operator">=</span> Neural_Network<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># trains the NN 1,000 times</span>\n  <span class="token keyword">print</span> <span class="token string">"Input: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Actual Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Predicted Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>NN<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Loss: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y <span class="token operator">-</span> NN<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># mean sum squared loss</span>\n  <span class="token keyword">print</span> <span class="token string">"\\n"</span>\n  NN<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Great, we now have a Neural Network! What about using these trained weights to predict test scores that we don’t know?</p>\n<h2>Predictions</h2>\n<p>Now, let’s create a new function that prints our predicted output for <code class="language-text">xPredicted</code>. All we have to run is <code class="language-text">forward(xPredicted)</code> to return an output!</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">print</span> <span class="token string">"Predicted data based on trained weights: "</span><span class="token punctuation">;</span>\n  <span class="token keyword">print</span> <span class="token string">"Input (scaled): \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>xPredicted<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">print</span> <span class="token string">"Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>xPredicted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>To run this function simply call it under the for loop.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">NN<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>If you’d like to save your trained weights, you can do so with <code class="language-text">np.savetxt</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">saveWeights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"w1.txt"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>W1<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">)</span>\n  np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"w2.txt"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>W2<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Here’s the final program:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n\n<span class="token comment"># X = (hours studying, hours sleeping), y = score on test</span>\nxAll <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># input data</span>\ny <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">86</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># output</span>\n\n<span class="token comment"># scale units</span>\nxAll <span class="token operator">=</span> xAll<span class="token operator">/</span>np<span class="token punctuation">.</span>amax<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># scaling input data</span>\ny <span class="token operator">=</span> y<span class="token operator">/</span><span class="token number">100</span> <span class="token comment"># scaling output data (max test score is 100)</span>\n\n<span class="token comment"># split data</span>\nX <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># training data</span>\nxPredicted <span class="token operator">=</span> np<span class="token punctuation">.</span>split<span class="token punctuation">(</span>xAll<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># testing data</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Neural_Network</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token comment">#parameters</span>\n    self<span class="token punctuation">.</span>inputSize <span class="token operator">=</span> <span class="token number">2</span>\n    self<span class="token punctuation">.</span>outputSize <span class="token operator">=</span> <span class="token number">1</span>\n    self<span class="token punctuation">.</span>hiddenSize <span class="token operator">=</span> <span class="token number">3</span>\n\n  <span class="token comment">#weights</span>\n    self<span class="token punctuation">.</span>W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inputSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">)</span> <span class="token comment"># (3x2) weight matrix from input to hidden layer</span>\n    self<span class="token punctuation">.</span>W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hiddenSize<span class="token punctuation">,</span> self<span class="token punctuation">.</span>outputSize<span class="token punctuation">)</span> <span class="token comment"># (3x1) weight matrix from hidden to output layer</span>\n\n  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment">#forward propagation through our network</span>\n    self<span class="token punctuation">.</span>z <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W1<span class="token punctuation">)</span> <span class="token comment"># dot product of X (input) and first set of 3x2 weights</span>\n    self<span class="token punctuation">.</span>z2 <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment"># activation function</span>\n    self<span class="token punctuation">.</span>z3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W2<span class="token punctuation">)</span> <span class="token comment"># dot product of hidden layer (z2) and second set of 3x1 weights</span>\n    o <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z3<span class="token punctuation">)</span> <span class="token comment"># final activation function</span>\n    <span class="token keyword">return</span> o\n\n  <span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># activation function</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">def</span> <span class="token function">sigmoidPrime</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment">#derivative of sigmoid</span>\n    <span class="token keyword">return</span> s <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">)</span>\n\n  <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># backward propagate through the network</span>\n    self<span class="token punctuation">.</span>o_error <span class="token operator">=</span> y <span class="token operator">-</span> o <span class="token comment"># error in output</span>\n    self<span class="token punctuation">.</span>o_delta <span class="token operator">=</span> self<span class="token punctuation">.</span>o_error<span class="token operator">*</span>self<span class="token punctuation">.</span>sigmoidPrime<span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment"># applying derivative of sigmoid to error</span>\n\n    self<span class="token punctuation">.</span>z2_error <span class="token operator">=</span> self<span class="token punctuation">.</span>o_delta<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W2<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token comment"># z2 error: how much our hidden layer weights contributed to output error</span>\n    self<span class="token punctuation">.</span>z2_delta <span class="token operator">=</span> self<span class="token punctuation">.</span>z2_error<span class="token operator">*</span>self<span class="token punctuation">.</span>sigmoidPrime<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2<span class="token punctuation">)</span> <span class="token comment"># applying derivative of sigmoid to z2 error</span>\n\n    self<span class="token punctuation">.</span>W1 <span class="token operator">+=</span> X<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>z2_delta<span class="token punctuation">)</span> <span class="token comment"># adjusting first set (input --> hidden) weights</span>\n    self<span class="token punctuation">.</span>W2 <span class="token operator">+=</span> self<span class="token punctuation">.</span>z2<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>o_delta<span class="token punctuation">)</span> <span class="token comment"># adjusting second set (hidden --> output) weights</span>\n\n  <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    o <span class="token operator">=</span> self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n    self<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> o<span class="token punctuation">)</span>\n\n  <span class="token keyword">def</span> <span class="token function">saveWeights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"w1.txt"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>W1<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">)</span>\n    np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">"w2.txt"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>W2<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"%s"</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span> <span class="token string">"Predicted data based on trained weights: "</span><span class="token punctuation">;</span>\n    <span class="token keyword">print</span> <span class="token string">"Input (scaled): \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>xPredicted<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">print</span> <span class="token string">"Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>xPredicted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nNN <span class="token operator">=</span> Neural_Network<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">xrange</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># trains the NN 1,000 times</span>\n  <span class="token keyword">print</span> <span class="token string">"# "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\n"</span>\n  <span class="token keyword">print</span> <span class="token string">"Input (scaled): \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Actual Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Predicted Output: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>NN<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">print</span> <span class="token string">"Loss: \\n"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y <span class="token operator">-</span> NN<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># mean sum squared loss</span>\n  <span class="token keyword">print</span> <span class="token string">"\\n"</span>\n  NN<span class="token punctuation">.</span>train<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>\n\nNN<span class="token punctuation">.</span>saveWeights<span class="token punctuation">(</span><span class="token punctuation">)</span>\nNN<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Here’s what I got after training the network 150,000 times:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"># <span class="token number">150000</span>\n\n<span class="token function">Input</span> <span class="token punctuation">(</span>scaled<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.4</span> <span class="token number">0.9</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.2</span> <span class="token number">0.5</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.6</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\nActual Output<span class="token punctuation">:</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.92</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.86</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.89</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\nPredicted Output<span class="token punctuation">:</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.92</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.86</span><span class="token punctuation">]</span>\n <span class="token punctuation">[</span><span class="token number">0.89</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\nLoss<span class="token punctuation">:</span>\n<span class="token number">5.904467817735647e-17</span>\n\n\nPredicted data based on trained weights<span class="token punctuation">:</span>\n<span class="token function">Input</span> <span class="token punctuation">(</span>scaled<span class="token punctuation">)</span><span class="token punctuation">:</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.</span> <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\nOutput<span class="token punctuation">:</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.93545994</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>\n      </div>\n<p>There you have it! A full-fledged neural network that can learn and adapt to produce accurate outputs. While we thought of our inputs as hours studying and sleeping, and our outputs as test scores, feel free to change these to whatever you like and observe how the network adapts! After all, all the network sees are the numbers. The calculations we made, as complex as they seemed to be, all played a big role in our learning model. If you think about it, it’s super impressive that your computer, a physical object, managed to <em>learn</em> by itself!</p>\n<iframe height="400px" width="100%" src="https://repl.it/@shamdasani/Enlight-Neural-Network?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>\n<h4>References</h4>\n<p><a href="https://stevenmiller888.github.io/mind-how-to-build-a-neural-network/">Steven Miller</a></p>\n<p><a href="https://www.youtube.com/watch?v=bxe2T-V8XRs">Welch Labs</a></p>\n<p><a href="https://blog.kabir.sh/posts/machine-learning.html">Kabir Shah</a></p>',
frontmatter:{date:"October 04, 2017",img:"/img/nn.png",desc:"Build a basic Feedforward Neural Network with backpropagation in Python",writer:"Samay Shamdasani",writerId:"samay",difficulty:"advanced",category:"python",title:"Build a Neural Network",demourl:"https://repl.it/Jxmb/2",source:"https://github.com/tryenlight/enlight/tree/master/demo/machine-learning/NeuralNetwork/NeuralNetwork.py",language:"Python",id:"neural-network",embed:!0,embedURL:"https://repl.it/repls/PurpleSqueakyFunctions?lite=true",template:"post"}}},pathContext:{slug:"/projects/neural-network/",previous:{fields:{slug:"/projects/twitter-bot/"},frontmatter:{title:"Build a Twitter Bot",template:"post"}},next:{fields:{slug:"/projects/code-editor/"},frontmatter:{title:"Build a Live Code Editor",template:"post"}}}}}});
//# sourceMappingURL=path---projects-neural-network-120c794b6bb79c3a13aa.js.map